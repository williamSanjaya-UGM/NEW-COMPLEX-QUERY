CREATE OR REPLACE FUNCTION FN_DUPLICATE_TABLE_FUNC(
    CASHIER_ID IN NUMERIC
)RETURN TYP_POS_RECORD
AS
    V_POS_RECORD TYP_POS_RECORD;
BEGIN
    SELECT OBJ_POS_RECORD(
        ID,
        CASHIER_ID,
        POS_ID,
        SIGN_IN_OFFICE,
        SIGN_OUT_OFFICE,
        INPUT_DATE
    )BULK COLLECT INTO V_POS_RECORD FROM(
        SELECT
            ID,
            CASHIER_ID,
            POS_ID,
            SIGN_IN_OFFICE,
            SIGN_OUT_OFFICE,
            INPUT_DATE
        FROM CASHIER_POS_RECORD
    );
    
    RETURN V_POS_RECORD;
END;

CREATE OR REPLACE PROCEDURE TEST_DOANG(NUMS IN NUMERIC, OUTS OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN OUTS FOR
    SELECT *
    FROM EMP_HR HR
    JOIN FN_DUPLICATE_TABLE_FUNC(NUMS) FUNC
    ON FUNC.CASHIER_ID=HR.ID;
END;

CREATE OR REPLACE PACKAGE PKG_STRING_TRACKER_1 IS
    SUBTYPE VARIABLE_NAME_T IS VARCHAR2(30000);
    
    PROCEDURE USP_CLEAR_USED_LIST;
    
    FUNCTION FN_STRING_IN_USE(VALUE_IN IN VARIABLE_NAME_T) RETURN BOOLEAN;
    
    PROCEDURE USP_MARK_AS_USED(VALUE_IN IN VARIABLE_NAME_T);
END PKG_STRING_TRACKER_1;

CREATE OR REPLACE PACKAGE BODY PKG_STRING_TRACKER_1 IS
    TYPE USED_AAT IS TABLE OF VARIABLE_NAME_T INDEX BY PLS_INTEGER;
    
    G_NAMES_USED USED_AAT;
    
    PROCEDURE USP_CLEAR_USED_LIST IS
    BEGIN
        G_NAMES_USED.DELETE;
    END;
    
    PROCEDURE USP_MARK_AS_USED(VALUE_IN IN VARIABLE_NAME_T)
    IS
    BEGIN
        G_NAMES_USED(G_NAMES_USED.COUNT+1):=VALUE_IN;
    END;
    
    FUNCTION FN_STRING_IN_USE(VALUE_IN IN VARIABLE_NAME_T)
    RETURN BOOLEAN
    IS
        C_COUNT CONSTANT PLS_INTEGER:=G_NAMES_USED.COUNT;
        L_INDEX PLS_INTEGER:=G_NAMES_USED.FIRST;
        L_FOUND BOOLEAN DEFAULT FALSE;
    BEGIN
        IF L_INDEX IS NOT NULL
        THEN
            WHILE(NOT L_FOUND AND L_INDEX<=C_COUNT)
            LOOP
                --SEARCHING IN THE COLLECTION LOOKING FOR A MATCH
                L_FOUND:=VALUE_IN=G_NAMES_USED(L_INDEX);
                L_INDEX:=L_INDEX+1;
            END LOOP;
        END IF;
        
        RETURN L_FOUND;
    END;
END PKG_STRING_TRACKER_1;

CREATE OR REPLACE PACKAGE PKG_STRING_TRACKER_2 IS
    SUBTYPE VARIABLE_NAME_T IS VARCHAR2(30000);
    
    PROCEDURE USP_CLEAR_USED_LIST;
    
    FUNCTION FN_STRING_IN_USE(VALUE_IN IN VARIABLE_NAME_T) RETURN BOOLEAN;
    
    PROCEDURE USP_MARK_AS_USED(VALUE_IN IN VARIABLE_NAME_T);
END PKG_STRING_TRACKER_2;


CREATE OR REPLACE PACKAGE BODY PKG_STRING_TRACKER_2 IS
    SUBTYPE WHO_CARES_T IS BOOLEAN;
    
    C_DOES_NOT_MATTER CONSTANT WHO_CARES_T DEFAULT NULL;
    
    TYPE USED_AAT IS TABLE OF WHO_CARES_T INDEX BY VARIABLE_NAME_T;
    
    G_NAMES_USED USED_AAT;
    
    PROCEDURE USP_CLEAR_USED_LIST IS
    BEGIN
        G_NAMES_USED.DELETE;
    END;
    
    PROCEDURE USP_MARK_AS_USED(VALUE_IN IN VARIABLE_NAME_T)
    IS
    BEGIN
        G_NAMES_USED(VALUE_IN):=C_DOES_NOT_MATTER;
    END;
    
    FUNCTION FN_STRING_IN_USE(VALUE_IN IN VARIABLE_NAME_T)
    RETURN BOOLEAN
    IS
    BEGIN
        
        RETURN G_NAMES_USED.EXISTS(VALUE_IN);
    END;
END PKG_STRING_TRACKER_2;

CREATE OR REPLACE TYPE OBJ_INSERT_SELECT_COLLECT FORCE AS OBJECT(ID NUMERIC, NUMS NUMERIC,NUMS_1 NUMERIC);

CREATE OR REPLACE TYPE TYP_INSERT_SELECT_COLLECT FORCE AS TABLE OF OBJ_INSERT_SELECT_COLLECT;

create or replace FUNCTION FN_PRETEND_PARAMETER(
    P_NUM IN NUMERIC
)RETURN TYP_INSERT_SELECT_COLLECT
AS
    V_COLLECT TYP_INSERT_SELECT_COLLECT;
BEGIN
    SELECT OBJ_INSERT_SELECT_COLLECT(
        ID,
        NUMS,
        NUMS_1
    )BULK COLLECT INTO V_COLLECT FROM (
        SELECT 
            NULL ID,
            LEVEL NUMS,
            LEVEL NUMS_1
        FROM DUAL
        CONNECT BY LEVEL <=P_NUM
    );

    RETURN V_COLLECT;
END;

create or replace PROCEDURE USP_INSERT_SELECT_RETURNING(
    P_NUM IN NUMERIC,
    P_CUR OUT SYS_REFCURSOR
)AS
    NT_PASSED_IN TYP_INSERT_SELECT_COLLECT;
    NT_TO_RETURN TYP_INSERT_SELECT_COLLECT;
BEGIN
    NT_PASSED_IN:=FN_PRETEND_PARAMETER(P_NUM);

    FORALL I IN 1..NT_PASSED_IN.COUNT
        INSERT INTO TBL_TEST_AGAIN_2(NUMS,NUMS_1)
            VALUES(
                TREAT(NT_PASSED_IN(I) AS OBJ_INSERT_SELECT_COLLECT).NUMS, 
                TREAT(NT_PASSED_IN(I) AS OBJ_INSERT_SELECT_COLLECT).NUMS_1
            )
        RETURNING OBJ_INSERT_SELECT_COLLECT(ID,NUMS,NUMS_1) BULK COLLECT INTO NT_TO_RETURN;

    FOR I IN 1..NT_TO_RETURN.COUNT LOOP
        DBMS_OUTPUT.PUT_LINE(TO_CHAR(NT_TO_RETURN(I).ID)||' '||TO_CHAR(NT_TO_RETURN(I).NUMS)||' '||TO_CHAR(NT_TO_RETURN(I).NUMS_1));
    END LOOP;
END;

CREATE OR REPLACE PROCEDURE DGR_DELETE_TBL
AS
BEGIN
    EXECUTE IMMEDIATE('DROP TABLE TBL_TEST_AGAIN_2');
END;

EXECUTE DGR_DELETE_TBL;