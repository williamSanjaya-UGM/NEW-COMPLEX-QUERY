CREATE OR REPLACE TYPE TEST_PAYMENT_ORDER FORCE AS OBJECT (
    ORDER_ID NUMERIC,
    TRANSACTION_ID NUMERIC,
    TABLE_ID NUMERIC
);

CREATE OR REPLACE TYPE TEST_PAYMENT_ORDER_2 FORCE AS OBJECT (
    ORDER_ID NUMERIC,
    TRANSACTION_ID NUMERIC,
    TABLE_ID NUMERIC,
    INVT_NAME VARCHAR2(100)
);

CREATE OR REPLACE TYPE TYP_TEST_PAYMENT_ORDER FORCE AS TABLE OF TEST_PAYMENT_ORDER

CREATE OR REPLACE TYPE TYP_TEST_PAYMENT_ORDER_2 FORCE AS TABLE OF TEST_PAYMENT_ORDER_2

create or replace PROCEDURE USP_TEST_TABLE_JOIN(
    P_ORDER_ID IN NUMERIC
)
AS
    V_COLLECT TYP_TEST_PAYMENT_ORDER;
    P_COUNT NUMERIC;
    V_COL TYP_TEST_PAYMENT_ORDER_2;
    P_COUNT2 NUMERIC;
BEGIN
    SELECT TEST_PAYMENT_ORDER(
        ORDER_ID,
        TRANSACTION_ID,
        TABLE_ID
    ) BULK COLLECT INTO V_COLLECT
    FROM (
        SELECT 
            C.ORDER_ID ORDER_ID,
            P.TRANSACTION_ID TRANSACTION_ID,
            C.TABLE_ID TABLE_ID
        FROM CUST_MAST_ORDER C
        JOIN CUST_ORDER_PAYMENT P
            ON C.ORDER_ID=P.ORDER_ID
        WHERE
            C.ORDER_ID=P_ORDER_ID
        );

    SELECT COUNT(1) INTO P_COUNT FROM TABLE (V_COLLECT);
    DBMS_OUTPUT.PUT_LINE(P_COUNT);

    SELECT TEST_PAYMENT_ORDER_2(
        ORDER_ID,
        TRANSACTION_ID,
        TABLE_ID,
        INVT_NAME
    ) BULK COLLECT INTO V_COL FROM(
        SELECT 
            L.ORDER_ID,
            L.TRANSACTION_ID,
            L.TABLE_ID,
            D.INVT_NAME
        FROM REST_DETAIL_INVENTORY D
        LEFT JOIN TABLE(V_COLLECT) L
        ON L.TABLE_ID=D.ID
    );

    SELECT COUNT(1) INTO P_COUNT2 FROM TABLE (V_COL);

    FORALL I IN 1..V_COL.COUNT
        INSERT INTO DUMP_TEST_MULTITEST_JOIN(
            ORDER_ID,
            TRANSACTION_ID,
            TABLE_ID,
            INVT_NAME
        ) VALUES(
            V_COL(I).ORDER_ID,
            V_COL(I).TRANSACTION_ID,
            V_COL(I).TABLE_ID,
            V_COL(I).INVT_NAME
        );
        COMMIT;
    DBMS_OUTPUT.PUT_LINE(P_COUNT2);
END;

-- EXAMPLE OF USING .EXISTS & .DELETE STATEMENT IN FORALL
create or replace PROCEDURE USP_TEST_TABLE_JOIN_1(
    P_ORDER_ID IN NUMERIC
)
AS
    V_COLLECT TYP_TEST_PAYMENT_ORDER;
    P_COUNT NUMERIC;
    V_COL TYP_TEST_PAYMENT_ORDER_2;
    P_COUNT2 NUMERIC;
BEGIN
    SELECT TEST_PAYMENT_ORDER(
        ORDER_ID,
        TRANSACTION_ID,
        TABLE_ID
    ) BULK COLLECT INTO V_COLLECT
    FROM (
        SELECT 
            C.ORDER_ID ORDER_ID,
            P.TRANSACTION_ID TRANSACTION_ID,
            C.TABLE_ID TABLE_ID
        FROM CUST_MAST_ORDER C
        JOIN CUST_ORDER_PAYMENT P
            ON C.ORDER_ID=P.ORDER_ID
        WHERE
            C.ORDER_ID=P_ORDER_ID
        );

    SELECT COUNT(1) INTO P_COUNT FROM TABLE (V_COLLECT);
    DBMS_OUTPUT.PUT_LINE(P_COUNT);

    SELECT TEST_PAYMENT_ORDER_2(
        ORDER_ID,
        TRANSACTION_ID,
        TABLE_ID,
        INVT_NAME
    ) BULK COLLECT INTO V_COL FROM(
        SELECT 
            L.ORDER_ID,
            L.TRANSACTION_ID,
            L.TABLE_ID,
            D.INVT_NAME
        FROM REST_DETAIL_INVENTORY D
        LEFT JOIN TABLE(V_COLLECT) L
        ON L.TABLE_ID=D.ID
    );

    SELECT COUNT(1) INTO P_COUNT2 FROM TABLE (V_COL);

    V_COL.DELETE(3,6);
    FOR I IN 1..V_COL.LAST LOOP
        IF V_COL.EXISTS(I) THEN
            DBMS_OUTPUT.PUT_LINE(V_COL(I).INVT_NAME);
        ELSE
            DBMS_OUTPUT.PUT_LINE('NO DATA AT INDEX '||I);
        END IF;
    END LOOP;
END;

-- EXAMPLE OF USING INDICES OF (A METHOD SO IT WILL ONLY INSERT INTO THE TABLE WHERE THE VALUE/INDEX IS EXIST)
create or replace PROCEDURE USP_TEST_TABLE_JOIN_2(
    P_ORDER_ID IN NUMERIC
)
AS
    V_COLLECT TYP_TEST_PAYMENT_ORDER;
    P_COUNT NUMERIC;
    V_COL TYP_TEST_PAYMENT_ORDER_2;
    P_COUNT2 NUMERIC;
BEGIN
    SELECT TEST_PAYMENT_ORDER(
        ORDER_ID,
        TRANSACTION_ID,
        TABLE_ID
    ) BULK COLLECT INTO V_COLLECT
    FROM (
        SELECT 
            C.ORDER_ID ORDER_ID,
            P.TRANSACTION_ID TRANSACTION_ID,
            C.TABLE_ID TABLE_ID
        FROM CUST_MAST_ORDER C
        JOIN CUST_ORDER_PAYMENT P
            ON C.ORDER_ID=P.ORDER_ID
        WHERE
            C.ORDER_ID=P_ORDER_ID
        );

    SELECT COUNT(1) INTO P_COUNT FROM TABLE (V_COLLECT);
    DBMS_OUTPUT.PUT_LINE(P_COUNT);

    SELECT TEST_PAYMENT_ORDER_2(
        ORDER_ID,
        TRANSACTION_ID,
        TABLE_ID,
        INVT_NAME
    ) BULK COLLECT INTO V_COL FROM(
        SELECT 
            L.ORDER_ID,
            L.TRANSACTION_ID,
            L.TABLE_ID,
            D.INVT_NAME
        FROM REST_DETAIL_INVENTORY D
        LEFT JOIN TABLE(V_COLLECT) L
        ON L.TABLE_ID=D.ID
    );

    SELECT COUNT(1) INTO P_COUNT2 FROM TABLE (V_COL);

    V_COL.DELETE(3,6);
    FORALL I IN INDICES OF V_COL
        INSERT INTO DUMP_TEST_MULTITEST_JOIN(
            ORDER_ID,
            TRANSACTION_ID,
            TABLE_ID,
            INVT_NAME
        ) VALUES(
            V_COL(I).ORDER_ID,
            V_COL(I).TRANSACTION_ID,
            V_COL(I).TABLE_ID,
            V_COL(I).INVT_NAME ||' ''FROM INDICES'''
        );
        COMMIT;
END;

-- EXAMPLE OF USING VALUES OF (A METHOD SO IT WILL ONLY INSERT SOME VALUE, BASED ON SELECTED INDEX)
create or replace PROCEDURE USP_TEST_TABLE_JOIN_3(
    P_ORDER_ID IN NUMERIC
)
AS
    V_COLLECT TYP_TEST_PAYMENT_ORDER;
    P_COUNT NUMERIC;
    V_COL TYP_TEST_PAYMENT_ORDER_2;
    P_COUNT2 NUMERIC;

    TYPE TYP_ARRAY IS TABLE OF PLS_INTEGER INDEX BY PLS_INTEGER;
    IDX_ARR TYP_ARRAY;
BEGIN
    SELECT TEST_PAYMENT_ORDER(
        ORDER_ID,
        TRANSACTION_ID,
        TABLE_ID
    ) BULK COLLECT INTO V_COLLECT
    FROM (
        SELECT 
            C.ORDER_ID ORDER_ID,
            P.TRANSACTION_ID TRANSACTION_ID,
            C.TABLE_ID TABLE_ID
        FROM CUST_MAST_ORDER C
        JOIN CUST_ORDER_PAYMENT P
            ON C.ORDER_ID=P.ORDER_ID
        WHERE
            C.ORDER_ID=P_ORDER_ID
        );

    SELECT COUNT(1) INTO P_COUNT FROM TABLE (V_COLLECT);
    DBMS_OUTPUT.PUT_LINE(P_COUNT);

    SELECT TEST_PAYMENT_ORDER_2(
        ORDER_ID,
        TRANSACTION_ID,
        TABLE_ID,
        INVT_NAME
    ) BULK COLLECT INTO V_COL FROM(
        SELECT 
            L.ORDER_ID,
            L.TRANSACTION_ID,
            L.TABLE_ID,
            D.INVT_NAME
        FROM REST_DETAIL_INVENTORY D
        LEFT JOIN TABLE(V_COLLECT) L
        ON L.TABLE_ID=D.ID
    );

    SELECT COUNT(1) INTO P_COUNT2 FROM TABLE (V_COL);

    IDX_ARR(1):=3;
    IDX_ARR(5):=7;
    IDX_ARR(12):=8;
    IDX_ARR(28):=10;
    FORALL I IN VALUES OF IDX_ARR
        INSERT INTO DUMP_TEST_MULTITEST_JOIN(
            ORDER_ID,
            TRANSACTION_ID,
            TABLE_ID,
            INVT_NAME
        ) VALUES(
            V_COL(I).ORDER_ID,
            V_COL(I).TRANSACTION_ID,
            V_COL(I).TABLE_ID,
            V_COL(I).INVT_NAME ||' ''FROM VALUES'''
        );
        COMMIT;
END;

-- SP WITH OUT PARAM OBJECT TABLE TYPE
create or replace PROCEDURE USP_TEST_TABLE_JOIN_4(
    P_ORDER_ID IN NUMERIC,
    V_COL OUT TYP_TEST_PAYMENT_ORDER_2
)
AS
    V_COLLECT TYP_TEST_PAYMENT_ORDER;
    P_COUNT NUMERIC;
    P_COUNT2 NUMERIC;
BEGIN
    SELECT TEST_PAYMENT_ORDER(
        ORDER_ID,
        TRANSACTION_ID,
        TABLE_ID
    ) BULK COLLECT INTO V_COLLECT
    FROM (
        SELECT 
            C.ORDER_ID ORDER_ID,
            P.TRANSACTION_ID TRANSACTION_ID,
            C.TABLE_ID TABLE_ID
        FROM CUST_MAST_ORDER C
        JOIN CUST_ORDER_PAYMENT P
            ON C.ORDER_ID=P.ORDER_ID
        WHERE
            C.ORDER_ID=P_ORDER_ID
        );

    SELECT COUNT(1) INTO P_COUNT FROM TABLE (V_COLLECT);
    DBMS_OUTPUT.PUT_LINE(P_COUNT);

    SELECT TEST_PAYMENT_ORDER_2(
        ORDER_ID,
        TRANSACTION_ID,
        TABLE_ID,
        INVT_NAME
    ) BULK COLLECT INTO V_COL FROM(
        SELECT 
            L.ORDER_ID,
            L.TRANSACTION_ID,
            L.TABLE_ID,
            D.INVT_NAME
        FROM REST_DETAIL_INVENTORY D
        LEFT JOIN TABLE(V_COLLECT) L
        ON L.TABLE_ID=D.ID
    );

    SELECT COUNT(1) INTO P_COUNT2 FROM TABLE (V_COL);
END;

create or replace PROCEDURE USP_TEST_TABLE_JOIN_IMPL(
    P_ORDER_ID IN NUMERIC,
    P_CUR OUT SYS_REFCURSOR
)AS
    V_TYP_OUT TYP_TEST_PAYMENT_ORDER_2;
BEGIN
    USP_TEST_TABLE_JOIN_4(P_ORDER_ID,V_TYP_OUT);

    OPEN P_CUR FOR
    SELECT * FROM TABLE(V_TYP_OUT);
END;

-- SP WITH OUT PARAM SYS_REFCURSOR TYPE
create or replace PROCEDURE USP_TEST_TABLE_JOIN_4_CUR(
    P_ORDER_ID IN NUMERIC,
    V_CUR OUT SYS_REFCURSOR
)
AS
    V_COLLECT TYP_TEST_PAYMENT_ORDER;
    P_COUNT NUMERIC;
    P_COUNT2 NUMERIC;

    V_COL TYP_TEST_PAYMENT_ORDER_2;
BEGIN
    SELECT TEST_PAYMENT_ORDER(
        ORDER_ID,
        TRANSACTION_ID,
        TABLE_ID
    ) BULK COLLECT INTO V_COLLECT
    FROM (
        SELECT 
            C.ORDER_ID ORDER_ID,
            P.TRANSACTION_ID TRANSACTION_ID,
            C.TABLE_ID TABLE_ID
        FROM CUST_MAST_ORDER C
        JOIN CUST_ORDER_PAYMENT P
            ON C.ORDER_ID=P.ORDER_ID
        WHERE
            C.ORDER_ID=P_ORDER_ID
        );

    SELECT COUNT(1) INTO P_COUNT FROM TABLE (V_COLLECT);
    DBMS_OUTPUT.PUT_LINE(P_COUNT);

    SELECT TEST_PAYMENT_ORDER_2(
        ORDER_ID,
        TRANSACTION_ID,
        TABLE_ID,
        INVT_NAME
    ) BULK COLLECT INTO V_COL FROM(
        SELECT 
            L.ORDER_ID,
            L.TRANSACTION_ID,
            L.TABLE_ID,
            D.INVT_NAME
        FROM REST_DETAIL_INVENTORY D
        LEFT JOIN TABLE(V_COLLECT) L
        ON L.TABLE_ID=D.ID
    );

    SELECT COUNT(1) INTO P_COUNT2 FROM TABLE (V_COL);

    OPEN V_CUR FOR
    SELECT * FROM TABLE(V_COL);
    
    DBMS_OUTPUT.PUT_LINE(P_COUNT2);
END;

-- SP IMPLEMENTATION SYS_REFCURSOR OUT TYPE
create or replace PROCEDURE USP_TEST_TABLE_JOIN_IMPL_CUR(
    P_ORDER_ID IN NUMERIC,
    P_OUT_CUR OUT SYS_REFCURSOR
)AS
    PASS_CUR SYS_REFCURSOR;
    TYPE REC_CUR IS RECORD(ORDER_ID NUMERIC,
        TRANSACTION_ID NUMERIC,
        TABLE_ID NUMERIC,
        INVT_NAME VARCHAR2(100));
    L_CUR REC_CUR;
    V_COL TYP_TEST_PAYMENT_ORDER_2;
    IDX NUMERIC:=0;
    
    V_DUMB TYP_DUMB_TBLE_ORDER;
BEGIN
    V_COL:=TYP_TEST_PAYMENT_ORDER_2();
    V_COL.EXTEND;
    USP_TEST_TABLE_JOIN_4_CUR(P_ORDER_ID,PASS_CUR);
    LOOP
        IDX:=IDX+1;
        FETCH PASS_CUR INTO L_CUR;
        V_COL(IDX):= TEST_PAYMENT_ORDER_2(
            L_CUR.ORDER_ID,
            L_CUR.TRANSACTION_ID,
            L_CUR.TABLE_ID,
            L_CUR.INVT_NAME
        );
        EXIT WHEN PASS_CUR%NOTFOUND;
        V_COL.EXTEND();
    END LOOP;
    CLOSE PASS_CUR;
    
    DBMS_OUTPUT.PUT_LINE('HASIL COUNT '||V_COL.COUNT);
    
    SELECT OBJ_DUMB_TBLE_ORDER(
        FOOD_ID
        ,QTY
        ,SUBTOTAL
        ,TRANSACTION_ID
        ,TABLE_ID
        ,INVT_NAME
    )BULK COLLECT INTO V_DUMB FROM(
        SELECT
            FOOD_ID
            ,QTY
            ,SUBTOTAL
            ,DUMB.TRANSACTION_ID
            ,DUMB.TABLE_ID
            ,DUMB.INVT_NAME
        FROM CUST_DETAIL_ORDER CDO
        JOIN TABLE(V_COL) DUMB
            ON DUMB.ORDER_ID=CDO.MAST_ORDER_ID
    );
    
    OPEN P_OUT_CUR FOR
    SELECT * FROM TABLE(V_DUMB);
END;

-- UNION DUAL --
SELECT * FROM (
   SELECT 'asda' Col1 FROM dual
   UNION 
   SELECT 'asdasda' as Col1 FROM dual
) WHERE Col1 <> 'asda'


DECLARE
    PASS_CUR SYS_REFCURSOR;
    TYPE REC_CUR IS RECORD(ORDER_ID NUMERIC,
        TRANSACTION_ID NUMERIC,
        TABLE_ID NUMERIC,
        INVT_NAME VARCHAR2(100));
    L_CUR REC_CUR;
BEGIN
    USP_TEST_TABLE_JOIN_4_CUR(121,PASS_CUR);
    LOOP
        FETCH PASS_CUR INTO L_CUR;
        EXIT WHEN PASS_CUR%NOTFOUND;
    END LOOP;
    CLOSE PASS_CUR;
END;