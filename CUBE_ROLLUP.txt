-- SIMPLE USE OF EXTRACT FUNCTION PLSQL
EXTRACT(YEAR FROM DATE '2003-08-22')
Result: 2003

EXTRACT(MONTH FROM DATE '2003-08-22')
Result: 8

EXTRACT(DAY FROM DATE '2003-08-22')
Result: 22
--			ROLL UP GIVES N+1 LEVELS OF SUBTOTALS --
--			N = NUMBER OF COLUMNS IN ROLLUP --
--			URUTAN DI DALAM ROLLUP "MATTER/BERPENGARUH"--
--SIMPLE ROLLUP
SELECT 
    F.NAME
    ,SUM(D.SUBTOTAL)
FROM FOOD_BEVERAGES_INFO F
JOIN CUST_DETAIL_ORDER D
ON F.ID=D.FOOD_ID
GROUP BY
    ROLLUP(F.NAME);

-- BELOW WILL GIVE 3 LEVEL OF GROUP BY
-- FIRST IS WITH NORMAL GROUP BY
--SECOND IS WITH EACH COLUMN NULL
-- THIRD WITH BOTH COLUMN NULL
SELECT 
    F.NAME
    ,F.CATEGORY
    ,SUM(D.SUBTOTAL)
FROM FOOD_BEVERAGES_INFO F
JOIN CUST_DETAIL_ORDER D
ON F.ID=D.FOOD_ID
GROUP BY
    ROLLUP(F.CATEGORY,F.NAME);


--PARTIAL ROLLUP
SELECT
   salesman_id,
   customer_id,
   SUM(quantity * unit_price) amount
FROM
   orders
INNER JOIN order_items USING (order_id)
WHERE
   status      = 'Shipped' AND 
   salesman_id IS NOT NULL AND 
   EXTRACT(YEAR FROM order_date) = 2017
GROUP BY
   salesman_id,
   ROLLUP(customer_id);


--		CUBE GIVES 2 TO THE POW N LEVELS OF SUBTOTALS--
--		N = NUMBER OF CLUMNS IN CUBE--
SELECT 
    F.NAME
    ,SUM(D.SUBTOTAL)
FROM FOOD_BEVERAGES_INFO F
JOIN CUST_DETAIL_ORDER D
ON F.ID=D.FOOD_ID
GROUP BY
    CUBE(F.NAME);


--	COMBINATION OF CUBE AND GROUPING --
SELECT 
    F.NAME
    ,F.CATEGORY
    ,SUM(D.SUBTOTAL)
    ,GROUPING(F.NAME) AS NAME_GROUP
    ,GROUPING(F.CATEGORY)AS CATEGORY_GROUP
FROM FOOD_BEVERAGES_INFO F
JOIN CUST_DETAIL_ORDER D
ON F.ID=D.FOOD_ID
GROUP BY
    CUBE(F.CATEGORY,F.NAME)
ORDER BY CATEGORY_GROUP,NAME_GROUP;


-- GROUPING, INDICATES WHEATHER THE COLUMN IN A GROUP BY LIST AGGREGATED OR NOT.
-- GROUPING RETURN 1 FOR AGGREGATED AND 0 FOR NOT AGGREGATED
SELECT
    NAME,
    POSITION,
    NIK,
    SUM(SALARY),
    GROUPING(NAME),
    GROUPING(NIK),
    GROUPING(POSITION)
FROM EMP_HR
GROUP BY ROLLUP(NAME,NIK,POSITION);

-- GROUPING_ID, CONCATENATES ALL THE GROUPING() FUNCTIONS, PERFORM THE BINARY TO DECIMAL CONVERSION, AND RETURN THE EQUIVALENT INTEGER
SELECT
    NAME,
    POSITION,
    NIK,
    SUM(SALARY),
    GROUPING_ID(NAME),
    GROUPING_ID(NIK),
    GROUPING_ID(POSITION)
FROM EMP_HR
GROUP BY ROLLUP(NAME,NIK,POSITION);